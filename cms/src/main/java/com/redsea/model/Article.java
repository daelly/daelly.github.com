package com.redsea.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.request.FieldAnalysisRequest;
import org.apache.solr.client.solrj.response.AnalysisResponseBase.AnalysisPhase;
import org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo;
import org.apache.solr.client.solrj.response.FieldAnalysisResponse;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.params.CommonParams;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.CacheKit;
import com.redsea.common.CacheConstants;
import com.redsea.common.Consts;
import com.redsea.common.Filter;
import com.redsea.model.base.BaseArticle;
import com.redsea.ui.tag.Functions;


/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Article extends BaseArticle<Article> {
	 public static final Article dao = new Article();
	 public Page findPageJsonByConditions(Map<String, String[]> parasMap){
		    Integer pageNo=1;//默认第几页
		    Integer pageSize=15;//默认分页记录数
	        StringBuffer sql =new StringBuffer(" from tbl_article  t1  LEFT JOIN  tbl_folder t2 on  t1.folder_id=t2.id where 1=1 ");
	           for (Entry<String, String[]> e : parasMap.entrySet()) {
	                   String paraKey = e.getKey();
	                   String[] paraValue = e.getValue();
	                   String value = paraValue[0] != null ? paraValue[0] + "" : null;
	                   if(StrKit.isBlank(value)){
	                       continue;
	                   }
	                   if(getTableInfo().hasColumnLabel(paraKey)){
	                	  if(Integer.class.getName().equals(getTableInfo().getColumnType(paraKey).getName())){
	                		  sql.append(" and t1." + paraKey + " = "+value+"");
	                	  }else{
	                		  sql.append(" and t1." + paraKey + " = '"+value+"'");
	                	  }
	                   }else if (paraKey.startsWith(SEARCH_PREFIX)) {
	                      String filter=paraKey.substring(paraKey.indexOf(SEARCH_PREFIX)+SEARCH_PREFIX.length(),paraKey.lastIndexOf("_"));
	                      String attrName=paraKey.substring(paraKey.lastIndexOf("_")+1);
	                      if(!StrKit.isBlank(value)){
	                          if(filter.equals(Filter.OPERATOR_LIKE)){
	                              sql.append(" and t1." + attrName + " like '%"+value+"%'");
	                          }else  if(filter.equals(Filter.OPERATOR_NOT_LIKE)){
	                              sql.append(" and t1." + attrName + " not like '%"+value+"%'");
	                          }else if(filter.equals(Filter.OPERATOR_NULL)){
	                              sql.append(" and t1." + attrName + " is null");
	                          }else if(filter.equals(Filter.OPERATOR_NOT_NULL)){
	                              sql.append(" and t1." + attrName + "  is not null");
	                          }else if(filter.equals(Filter.RELATION_AND)){
	                              sql.append(" and t1." + attrName + " = '"+value+"'");
	                          }else{
	                              sql.append("  and t1." + attrName + " "+filter+" "+value+"");
	                          }
	                      }
	              }else if(paraKey.startsWith("page.")){
	                   value = paraValue[0] != null ? paraValue[0] + "" : "1";
	                   if("page.pageNo".equals(paraKey)){
	                       pageNo=Integer.parseInt(value);
	                   }else if("page.pageSize".equals(paraKey)){
	                       pageSize=Integer.parseInt(value);
	                   }
	              }
	          }
	            boolean flag=true;
	           for (Entry<String, String[]> e : parasMap.entrySet()) {
	               String paraKey = e.getKey();
	               if(paraKey.startsWith("order_")){
	                   if(flag){
	                       sql.append(" order by ");
	                       flag=false;
	                   }
	                   String[] paraValue = e.getValue();
	                   String value = paraValue[0] != null ? paraValue[0] + "" : null;
	                   String attrName=paraKey.replace("order_","");
	                   sql.append("t1."+attrName+" "+value+",");
	                }
	           }
	           if(!flag){
	               sql.deleteCharAt(sql.length()-1);  
	           }
	         return  paginate(pageNo, pageSize, "select t1.*,t2.`name` as folderName ", sql.toString()); 
	    }
	 public Page getArticlePageByFolderId(String city, Integer folderId,String pageNo){
		 if(pageNo==null){
			 pageNo="1";
		 }
		  Integer pageSize=15;//默认分页记录数
		  StringBuffer sql =new StringBuffer(" from tbl_article  t1  LEFT JOIN  tbl_folder t2 on  t1.folder_id=t2.id where 1=1 ");
		  if(folderId!=null){
			  sql.append(" and t1.folder_id = "+folderId+"");
		  }
		  String addressSql="";
		  if(StrKit.notBlank(city)){
			  addressSql=" and t1.address='"+city+"'";
			  sql.append(addressSql);
		  }
		  sql.append(" and t1.status=1 order by publish_time desc");
		  if(folderId==null&&"1".equals(pageNo)){
			  Page page= paginateByCache(Consts.CacheName.hour.get(),city+"_indexData",Integer.parseInt(pageNo), pageSize, "select t1.*,t2.`name` as folderName,t2.path as path ", sql.toString());
			  if(StrKit.notBlank(city)){
				  if(page.getTotalRow()<20){
					  sql=new StringBuffer(sql.toString().replace(addressSql, ""));
					  page= paginateByCache(Consts.CacheName.hour.get(),city+"_indexData",Integer.parseInt(pageNo), pageSize, "select t1.*,t2.`name` as folderName,t2.path as path ", sql.toString());
					  return page;
				  }else{
					  return page;
				  }
			  }else{
				return  page;
			  }
		  }
		  return  paginate(Integer.parseInt(pageNo), pageSize, "select t1.*,t2.`name` as folderName,t2.path as path", sql.toString()); 
	 }
	 public Page searchtArticlePage(String keyword,String pageNo){
		 if(pageNo==null){
			 pageNo="1";
		 }
		 Integer pageSize=15;//默认分页记录数
		 StringBuffer sql =new StringBuffer(" from tbl_article  t1  LEFT JOIN  tbl_folder t2 on  t1.folder_id=t2.id where 1=1 ");
		 if(keyword!=null){
			 sql.append(" and t1.title like '%"+keyword+"%' ");
		 }
		 sql.append(" and t1.status=1 order by create_time desc");
		 return  paginate(Integer.parseInt(pageNo), pageSize, "select t1.*,t2.`name` as folderName ", sql.toString()); 
	 }
	 public Page gettArticlePageByTopicId(String topicId,String pageNo){
		 if(pageNo==null){
			 pageNo="1";
		 }
		 Integer pageSize=15;//默认分页记录数
		 StringBuffer sql =new StringBuffer(" from tbl_article  t1  LEFT JOIN  tbl_folder t2 on  t1.folder_id=t2.id where 1=1 ");
		 if(topicId!=null){
			 sql.append(" and t1.topic_id = ? ");
		 }
		 sql.append(" and t1.status=1 order by create_time desc");
		 return  paginate(Integer.parseInt(pageNo), pageSize, "select t1.*,t2.`name` as folderName ", sql.toString(),topicId); 
	 }
	 
	 public Page gettArticlePageByTopicId2(String topicId,String pageNo){
		 if(pageNo==null){
			 pageNo="1";
		 }
		 Integer pageSize=15;//默认分页记录数
		 StringBuffer sql =new StringBuffer(" from tbl_article  t1  where 1=1 ");
		 if(topicId!=null){
			 sql.append(" and t1.topic_id = ? ");
		 }
		 sql.append(" and t1.status=1 order by update_time desc");
		 return  paginate(Integer.parseInt(pageNo), pageSize, "select t1.* ", sql.toString(),topicId); 
	 }
	 
	 public Page getArticlePageByTagsId(String  tagsId,String pageNo){
		 if(pageNo==null){
			 pageNo="1";
		 }
		 Integer pageSize=15;//默认分页记录数
		 StringBuffer sql =new StringBuffer(" from tbl_article  t1  LEFT JOIN  tbl_folder t2 on  t1.folder_id=t2.id where 1=1 ");
		 if(StrKit.notBlank(tagsId)){
			 sql.append(" and t1.id in (SELECT  article_id from tbl_article_tags where tag_id= ? )");
		 }
		 sql.append(" and t1.status=1 order by create_time desc");
		 return  paginate(Integer.valueOf(pageNo), pageSize, "select t1.*,t2.`name` as folderName ", sql.toString(),tagsId); 
	 }
	 
	 public List getListByCache(int type){
		 String sql="";
		 List list=null;
		 //推荐
		 if(type==1){
			  sql="SELECT id,title from tbl_article where is_recommend=1 and `status`= 1 ORDER BY publish_time DESC limit 10";
			  list=Db.findByCache(Consts.CacheName.oneDay.get(), "article_list_1", sql);
		 }else if(type==2){//点击排名
			  sql="SELECT id,title from tbl_article where `status`= 1 ORDER BY count_view DESC,publish_time DESC limit 10";
			  list=Db.findByCache(Consts.CacheName.oneDay.get(), "article_list_2", sql);
		 }else if(type==3){//最新更新
			 sql="SELECT id,title from tbl_article where `status`= 1 ORDER BY publish_time DESC limit 10";
//			 sql="SELECT t1.*,t2.`name` as folderName from tbl_article t1 LEFT JOIN tbl_folder t2 on t1.folder_id=t2.id where t1.`status`= 1 ORDER BY t1.publish_time DESC limit 10";
			 list=Db.findByCache(Consts.CacheName.oneDay.get(), "article_list_3", sql);
		
		 }else if(type==4){//评论数
			 sql="SELECT id,title from tbl_article where `status`= 1 ORDER BY count_comment DESC,publish_time DESC limit 10";
		     list=Db.findByCache(Consts.CacheName.oneDay.get(), "article_list_4", sql);
		 }
		 return list;
	 }
	 public Record getArticle(String articleId){
		 String sql="SELECT t1.*, t2.`name` AS folderName FROM tbl_article t1 LEFT JOIN tbl_folder t2 ON t1.folder_id = t2.id WHERE  t1.id =?";
		 return Db.findFirst(sql,articleId);
	 }
	 public List<Article> getBannerData(){
		 String sql="SELECT id,title,image_url from tbl_article where `status`=1 and is_banner=1 and is_recommend=1 ORDER BY sort DESC,publish_time DESC limit 5";
//		 String sql="SELECT * from tbl_article where `status`=1 and is_banner=1  ORDER BY publish_time DESC,count_view DESC limit 5";
		 return findByCache(CacheConstants.CONSTANTS_HOME_CACHE, "home_banner",sql);
	 }
	 
	 /***
	  * 
	  * @param foldId
	  * @return
	  */
	 public List<Article> getChannelBannerDataByFoldId(Integer foldId){
		 String sql="SELECT id,title,image_url from tbl_article where `status`=1 and is_banner=1 and folder_id= "+foldId+" and is_recommend=1 ORDER BY sort DESC,publish_time DESC limit 5";
		 return findByCache(CacheConstants.CONSTANTS_CHANNEE_CACHE, "channer_banner_"+foldId,sql);
	 }
	 public Article getChannelArticleByFoldId(Integer foldId){
		 return findFirstByCache(CacheConstants.CONSTANTS_CHANNEE_CACHE,"channer_first_article_"+foldId,"SELECT id,title,summary from tbl_article WHERE `status`=1 and  folder_id= "+foldId+" ORDER BY sort desc,publish_time DESC LIMIT 1");
	 }
	 public List<Article> getChannelReadingRankingByFoldId(Integer foldId){
		 return findByCache(CacheConstants.CONSTANTS_CHANNEE_CACHE,"channer_ReadingRanking_"+foldId,"SELECT id,title from tbl_article WHERE `status`=1 and  folder_id= "+foldId+" ORDER BY count_view DESC,publish_time DESC LIMIT 9");
	 }
	 public List<Article> getChannelRecommenddArticleByFoldId(Integer foldId){
		 String sql="SELECT id,title,color FROM tbl_article where is_recommend=1 and  folder_id= "+foldId+" and is_banner=0 ORDER BY sort DESC,publish_time desc LIMIT 18";
		 return findByCache(CacheConstants.CONSTANTS_CHANNEE_CACHE, "channer_recommend_folder_"+foldId,sql);
	 }
	 
	 
	 /***
	  * 首页数据展示
	  */
	 @SuppressWarnings("unchecked")
	public static  Map getHomeData(String address){
		 Map homeMap=null;
		 Boolean flag=false;
		 if(address==null){
			 homeMap=CacheKit.get(CacheConstants.CONSTANTS_HOME_CACHE, "city_default");
		 }else{
			 flag=RegionCode.dao.getHotCity().contains(address);
			if(!flag){
				 homeMap=CacheKit.get(CacheConstants.CONSTANTS_HOME_CACHE, "city_default");
			}else{
				 homeMap=CacheKit.get(CacheConstants.CONSTANTS_HOME_CACHE, "city_"+address);
			}
		 }
		 if(homeMap==null){
			 homeMap=new HashMap();
			 String sql3="SELECT id,name,path from tbl_folder  where display_home=1  ORDER BY sort DESC";
			 List<Record> list2=Db.findByCache(CacheConstants.CONSTANTS_HOME_CACHE, "home_columns",sql3);
			 List list3=new ArrayList();
			 for(Record record:list2){
				 Map map=new HashMap();
				 map.put("name", record.getStr("name"));
				 map.put("path", record.getStr("path"));
				 List list5=null;
				 //有地址
				 if(StrKit.notBlank(address)){
					 Record firstObj= Db.findFirst("SELECT  id,title,image_url from tbl_article where folder_id="+record.getInt("id")+" and is_recommend=0 AND address='"+address+"' and image_url is not null ORDER BY publish_time DESC  LIMIT 1");
					/* if(firstObj==null){
						 firstObj= Db.findFirst("SELECT  id,title,image_url from tbl_article where folder_id="+record.getInt("id")+" and is_recommend=0 and image_url is not null ORDER BY publish_time DESC  LIMIT 1");
					 }*/
					 map.put("firstObj", firstObj);
					 //查询10条
					 String sql4="SELECT id,title,publish_time from tbl_article where folder_id="+record.getInt("id")+" AND `status`=1 AND address='"+address+"' and is_recommend=0  ORDER BY sort DESC,publish_time DESC LIMIT 10";
					 if(firstObj!=null){
						 //查询7条
						 sql4="SELECT id,title,publish_time from tbl_article where folder_id="+record.getInt("id")+" AND `status`=1  AND address='"+address+"'and is_recommend=0 and id!="+firstObj.getInt("id")+"  ORDER BY sort DESC,publish_time DESC LIMIT 7"; 
					 }
					 list5=Db.find(sql4);
					 if(firstObj!=null){
						 if(list5.size()<7){
							 int size=7-list5.size();
							 list5.addAll(Db.find("SELECT id,title,publish_time from tbl_article where folder_id="+record.getInt("id")+" AND `status`=1 and  address='' and is_recommend=0 and id!="+firstObj.getInt("id")+"  ORDER BY sort DESC,publish_time DESC LIMIT "+size+""));
						 }
					 }else{
						 if(list5.size()<10){
							 int size=10-list5.size();
							 list5.addAll(Db.find("SELECT id,title,publish_time from tbl_article where folder_id="+record.getInt("id")+" AND `status`=1 and address='' and is_recommend=0  ORDER BY sort DESC,publish_time DESC LIMIT  "+size+""));
						 }
					 }
				 }else{
					 Record firstObj= Db.findFirst("SELECT  id,title,image_url from tbl_article where folder_id="+record.getInt("id")+" and is_recommend=0 and image_url is not null ORDER BY publish_time DESC  LIMIT 1");
					 map.put("firstObj", firstObj);
					 //默认查询
					 //查询10条
					 String sql4="SELECT id,title,publish_time from tbl_article where folder_id="+record.getInt("id")+" AND `status`=1  and is_recommend=0  ORDER BY sort DESC,publish_time DESC LIMIT 10";
					 if(firstObj!=null){
						 //查询7条
						 sql4="SELECT id,title,publish_time from tbl_article where folder_id="+record.getInt("id")+" AND `status`=1  and is_recommend=0 and id!="+firstObj.getInt("id")+"  ORDER BY sort DESC,publish_time DESC LIMIT 7"; 
					 }
					 list5=Db.find(sql4);
				 }
				 map.put("list",list5);
				 list3.add(map);
			 }
			 homeMap.put("list3", list3);
			 if(address==null||!flag){
				 CacheKit.put(CacheConstants.CONSTANTS_HOME_CACHE, "city_default", homeMap);
			 }else{
				 CacheKit.put(CacheConstants.CONSTANTS_HOME_CACHE, "city_"+address, homeMap);
			 }
		 }
		 String sql1="SELECT id,title,color FROM tbl_article where  `status`=1 and is_recommend=1 and is_banner=0 ORDER BY sort DESC,publish_time desc LIMIT 20";
		 homeMap.put("list1",Db.findByCache(CacheConstants.CONSTANTS_HOME_CACHE, "home_tuijian",sql1)); //最新推荐
		 String sql2="SELECT id,title,image_url from tbl_article where `status`=1 and is_banner=1 and is_recommend=1 ORDER BY sort DESC,publish_time DESC limit 5";
		 homeMap.put("list2",Db.findByCache(CacheConstants.CONSTANTS_HOME_CACHE, "home_banner",sql2));
		 String sql3="SELECT * from tbl_topic where STATUS=1 ORDER BY publish_time desc limit 1";
		 homeMap.put("topic",Db.findFirstByCache(CacheConstants.CONSTANTS_HOME_CACHE, "home_topic",sql3));
		 return homeMap;
	 }
	 /***
	  * 
	  * @param topicId
	  * @return
	  */
	 public List<Article> getTopicBannerData(String topicId){
		 String sql="SELECT id,title,content,summary,image_url from tbl_article  where  topic_id= ? and is_banner=1 and `status`=1 and is_recommend=1";
		 return findByCache(CacheConstants.CONSTANTS_TOPIC_CACHE,"TopicBannerData_"+topicId,sql, new Object[]{topicId});
	 }
	 
	 public Page findPageBySolr(String keyword,String pageNo,String address){
		 final String server = Functions.getValueFromCache("solr_server");
		 final double cityWeight = 5;//城市权重
		 final String bf = "sum(recip(rord(publish_time),1,1000,1000),product(weight,20))";//发布时间权重，自定义权重关键字
		 if(pageNo==null){
			 pageNo="1";
		 }
		 int pageno = Integer.parseInt(pageNo);
		 Integer pageSize=15;//默认分页记录数
		 Page page = new Page(null, pageno, pageSize, 0, 0);
		 try {
			 HttpSolrServer httpSolrServer = null;
			 //先对关键字分词
			 if(!StrKit.isBlank(server))
				 httpSolrServer = new HttpSolrServer(server);
			 else
				 httpSolrServer = new HttpSolrServer("http://192.168.101.186:8400/solr/sb_core");
			 Set<String> results = null;
			 try {
				 FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest("/analysis/field");
				 analysisRequest.addFieldName("title");
				 analysisRequest.setFieldValue("");
				 analysisRequest.setQuery(keyword);
				 FieldAnalysisResponse analysisResponse = analysisRequest.process(httpSolrServer);
				 Iterator<AnalysisPhase> it = analysisResponse.getFieldNameAnalysis("title").getQueryPhases().iterator();
				 results = new HashSet<String>();
				 results.add(keyword);
				 while(it.hasNext()){
					 AnalysisPhase phase = it.next();
					 List<TokenInfo> list = phase.getTokens();
					 for (TokenInfo tokenInfo : list) {
						 results.add(tokenInfo.getText());
					}
				 }
			 }catch (Exception e) {
				e.printStackTrace();
			 }
			 SolrQuery solrQuery = new SolrQuery();
			 //权重处理
			 solrQuery.set(CommonParams.Q, StringUtils.join(results, ' '));
//			 solrQuery.set(CommonParams.Q, keyword);
			 solrQuery.set("qf", "title^2 content^0.5");
			 solrQuery.set("defType", "edismax");
			 if(StrKit.notBlank(address))
				 solrQuery.set("bq", "address:"+address+"^"+cityWeight);
			 solrQuery.set("bf", bf);//其他字段自定义权重
			 //分页处理
			 solrQuery.setStart((pageno-1)*pageSize);
			 solrQuery.setRows(pageSize);
			 System.out.println(solrQuery.getQuery());
//			 solrQuery.addSort("publish_time", ORDER.desc);
			 //高亮处理
			 solrQuery.setHighlight(true);
			 solrQuery.setHighlightFragsize(150);
			 solrQuery.setHighlightRequireFieldMatch(true);
			 solrQuery.setHighlightSimplePre("<span highlight style='color:#c00;'>");
			 solrQuery.setHighlightSimplePost("</span>");
			 solrQuery.setParam("hl.fl", "title","content");
			 QueryResponse response = httpSolrServer.query(solrQuery);
			 Map<String, Map<String, List<String>>> highlight = response.getHighlighting();
			 
			 SolrDocumentList sd = response.getResults();
			 List<Map<String,Object>> datas = new ArrayList<Map<String,Object>>();
			 for (SolrDocument solrDocument : sd) {
				String id = solrDocument.get("id").toString();
				String title = null,content = null;
				if(highlight.get(id)!=null && highlight.get(id).get("title")!=null){
					title = highlight.get(id).get("title").get(0);
				} 
				if(highlight.get(id)!=null && highlight.get(id).get("content")!=null){
					content = highlight.get(id).get("content").get(0);
				} 
				Set<Entry<String, Object>> entrySet = solrDocument.entrySet();
				Map<String,Object> m = new HashMap<String, Object>();
				for (Entry<String, Object> entry : entrySet) {
					m.put(entry.getKey(), entry.getValue());
				}
				if(!StrKit.isBlank(title))
					m.put("title", title);
//				if(!StrKit.isBlank(summary))
//					m.put("summary", summary);
				if(!StrKit.isBlank(content))
					m.put("content", content);
				datas.add(m);
			 }
			 int totalCount = (int) sd.getNumFound();
			 int totalPage = totalCount / pageSize;
			 page = new Page(datas, pageno, pageSize, totalPage, totalCount);
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (SolrServerException e) {
			e.printStackTrace();
		}
		return page;
	 }
	 
	 /**
	  * 更新评论数量
	  * @param id 被更新的文章主键id
	  * @param addCount 执行更新的数量，可为负数
	  * @return
	  */
	 public int updateCommentCount(int id,int addCount){
		 Article article = findById(id);
		 if(article == null)
			 return 0;
		 Integer commentCount = article.getCountComment();
		 commentCount += addCount;
		 article.setCountComment(commentCount);
		 article.update();
		 return 1;
	 }
	 
	 /**
	  * 批量更新文章评论
	  * @param postId
	  * @param addCont
	  * @return
	  */
	 public static int batchUpdateCommentCount(Long[] postId,int addCont){
		 String op = addCont>0?"+"+addCont:""+addCont;
		 String sql = "UPDATE tbl_article a  JOIN tbl_comment c ON a.id=c.thread_key SET count_comment=count_comment"+op+" WHERE c.post_id=?;";
		 Object[][] paras = new Object[postId.length][1];
		 for (int i = 0; i < paras.length; i++) {
			paras[i] = new Object[]{postId[i]};
		 }
		 int[] reses = Db.batch(sql, paras, postId.length);
		 int res = 0;
		 for (int i = 0; i < reses.length; i++) {
			res += reses[i];
		 }
		 return res;
	 }
}





